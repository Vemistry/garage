"use client";

import React, { useEffect, useState } from "react";
import Cookies from "js-cookie";
import { useRouter, usePathname } from "next/navigation";

const AdminDashboard: React.FC = () => {
  const router = useRouter();
  const pathname = usePathname();

  const [showModal, setShowModal] = useState(false);
  const [oldPassword, setOldPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");

  const [staff, setStaff] = useState<string[]>([]);
  const [loading, setLoading] = useState<boolean>(true);

  const fetchStaff = async () => {
    try {
      const res = await fetch("http://localhost:3001/api/users/staff", {
        method: "GET",
        credentials: "include",
      });

      if (res.ok) {
        const data = await res.json();
        const staffArray = data.data;
        const staffNames = staffArray.map((u: any) => u.full_name);
        setStaff(staffNames);
      } else {
        console.error(
          "L·ªói khi l·∫•y d·ªØ li·ªáu staff:",
          res.status,
          await res.text()
        );
      }
    } catch (err) {
      console.error("L·ªói m·∫°ng:", err);
    } finally {
      setLoading(false);
    }
  };

  const handleChangePassword = async () => {
    setError("");
    setSuccess("");

    if (!oldPassword || !newPassword || !confirmPassword) {
      return setError("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.");
    }
    if (newPassword.length < 6) {
      return setError("M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.");
    }
    if (newPassword !== confirmPassword) {
      return setError("X√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp.");
    }

    try {
      const res = await fetch(
        "http://localhost:3001/api/users/change-password",
        {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          credentials: "include",
          body: JSON.stringify({ oldPassword, newPassword }),
        }
      );

      const data = await res.json();
      if (res.ok) {
        setSuccess("ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
        setOldPassword("");
        setNewPassword("");
        setConfirmPassword("");
        setTimeout(() => setShowModal(false), 1500);
      } else {
        setError(data.message || "L·ªói ƒë·ªïi m·∫≠t kh·∫©u.");
      }
    } catch (err) {
      setError("L·ªói k·∫øt n·ªëi ƒë·∫øn server.");
    }
  };

  useEffect(() => {
    fetchStaff();
  }, []);

  const navItems = [
    { label: "Trang ch·ªß", icon: "üè†", path: "/admin" },
    { label: "Qu·∫£n l√Ω nh√¢n vi√™n", icon: "üë•", path: "/admin/staff" },
    { label: "Qu·∫£n l√Ω kh√°ch h√†ng", icon: "üë§", path: "/admin/customers" },
    { label: "Qu·∫£n l√Ω xe", icon: "üöó", path: "/admin/cars" },
    { label: "Th∆∞ vi·ªán xe", icon: "üìñ", path: "/admin/cars_categorical" },
    { label: "L·ªãch s·ª≠a ch·ªØa", icon: "üìÖ", path: "/admin/lich_hen" },
    { label: "Phi·∫øu s·ª≠a ch·ªØa", icon: "üßæ", path: "/admin/phieu_sua_chua" },
    { label: "Qu·∫£n l√Ω d·ªãch v·ª•", icon: "üß∞", path: "/admin/services" },
    { label: "Qu·∫£n l√Ω kho", icon: "üõ†Ô∏è", path: "/admin/kho" },
    { label: "B√°o c√°o doanh thu", icon: "üìä", path: "/admin/doanh_thu" },
  ];

  const handleLogout = async () => {
    try {
      const res = await fetch("/api/logout", {
        method: "GET",
        credentials: "include",
      });

      if (res.ok) {
        window.location.href = "/";
      } else {
        console.error("L·ªói khi logout:", await res.text());
      }
    } catch (err) {
      console.error("L·ªói logout:", err);
    }
  };

  const cars: string[] = [];
  const schedules: string[] = [];
  const inventory: string[] = [];
  const revenue = [{ month: "Th√°ng 6/2025", amount: "50,000,000 VNƒê" }];

  return (
    <div className="flex h-screen bg-gray-100">
      <div className="w-64 bg-gray-800 text-white flex flex-col">
        <div className="p-7 text-3xl font-bold">Auto Garage</div>
        <nav className="mt-4 flex-1">
          <ul>
            {navItems.map((item, index) => (
              <li
                key={index}
                onClick={() => router.push(item.path)}
                className={`p-4 flex items-center cursor-pointer hover:bg-gray-700 ${
                  pathname === item.path ? "bg-gray-700 font-bold" : ""
                }`}
              >
                <span className="mr-2">{item.icon}</span> {item.label}
              </li>
            ))}

            <li
              onClick={() => setShowModal(true)}
              className="p-4 flex items-center cursor-pointer hover:bg-gray-700 border-t border-gray-700"
            >
              <span className="mr-2">üîí</span> ƒê·ªïi m·∫≠t kh·∫©u
            </li>

            <li
              onClick={handleLogout}
              className="p-4 flex items-center cursor-pointer hover:bg-gray-700 border-t border-gray-700"
            >
              <span className="mr-2">üö™</span> ƒêƒÉng xu·∫•t
            </li>
          </ul>
        </nav>
      </div>

      <div className="flex-1 p-6 overflow-auto">
        <h1 className="text-2xl font-bold mb-6">T·ªïng quan</h1>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <Tile
            title="Qu·∫£n l√Ω nh√¢n vi√™n"
            value={staff.length.toString()}
            valueLabel="S·ªë nh√¢n vi√™n"
            icon="üë•"
            items={[]}
            color="bg-green-500"
            onClick={() => router.push("/admin/staff")}
          />
          <Tile
            title="Qu·∫£n l√Ω xe"
            value={cars.length.toString()}
            valueLabel="S·ªë xe ƒëang qu·∫£n l√Ω"
            icon="üöó"
            items={[]}
            color="bg-blue-500"
            onClick={() => router.push("/admin/cars")}
          />
          <Tile
            title="L·ªãch s·ª≠a ch·ªØa"
            value={schedules.length.toString()}
            valueLabel="S·ªë l·ªãch s·ª≠a ch·ªØa"
            icon="üìÖ"
            items={[]}
            color="bg-red-500"
            onClick={() => router.push("/admin/lich_hen")}
          />
          <Tile
            title="Qu·∫£n l√Ω kho"
            value={inventory.length.toString()}
            valueLabel="S·ªë ph·ª• t√πng"
            icon="üõ†Ô∏è"
            items={[]}
            color="bg-blue-400"
            onClick={() => router.push("/admin/kho")}
          />
          <Tile
            title="B√°o c√°o doanh thu"
            value={revenue[0]?.amount || "0 VNƒê"}
            valueLabel={revenue[0]?.month || "Ch∆∞a c√≥"}
            icon="üìä"
            items={[]}
            color="bg-gray-500"
            onClick={() => router.push("/admin/doanh_thu")}
          />
        </div>
      </div>

      {/* Modal ƒë·ªïi m·∫≠t kh·∫©u */}
      {showModal && (
        <div className="fixed top-1/2 left-1/2 z-50 transform -translate-x-1/2 -translate-y-1/2 bg-white p-6 rounded-lg shadow-xl w-96 border border-gray-200">
          <div className="flex justify-between items-center mb-3">
            <h2 className="text-lg font-semibold">ƒê·ªïi m·∫≠t kh·∫©u</h2>
            <button
              onClick={() => setShowModal(false)}
              className="text-gray-500 hover:text-red-500 text-xl"
            >
              √ó
            </button>
          </div>

          <input
            type="password"
            placeholder="M·∫≠t kh·∫©u c≈©"
            value={oldPassword}
            onChange={(e) => setOldPassword(e.target.value)}
            className="w-full p-2 border rounded mb-2"
          />
          <input
            type="password"
            placeholder="M·∫≠t kh·∫©u m·ªõi"
            value={newPassword}
            onChange={(e) => setNewPassword(e.target.value)}
            className="w-full p-2 border rounded mb-2"
          />
          <input
            type="password"
            placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            className="w-full p-2 border rounded mb-3"
          />

          {error && <p className="text-red-600 text-sm mb-2">{error}</p>}
          {success && <p className="text-green-600 text-sm mb-2">{success}</p>}

          <div className="flex justify-end gap-2">
            <button
              onClick={() => setShowModal(false)}
              className="px-4 py-1 bg-gray-200 rounded hover:bg-gray-300"
            >
              H·ªßy
            </button>
            <button
              onClick={handleChangePassword}
              className="px-4 py-1 bg-blue-600 text-white rounded hover:bg-blue-700"
            >
              ƒê·ªïi
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

interface TileProps {
  title: string;
  value: string;
  valueLabel: string;
  icon: string;
  items: string[];
  color: string;
  onClick?: () => void;
}

const Tile: React.FC<TileProps> = ({
  title,
  value,
  valueLabel,
  icon,
  items,
  color,
  onClick,
}) => (
  <div
    className={`${color} text-white p-4 rounded-lg shadow-md cursor-pointer`}
    onClick={onClick}
  >
    <div className="flex items-center justify-between">
      <h2 className="tile-header">{title}</h2>
      <span className="text-3xl">{icon}</span>
    </div>
    <p className="tile-number text-3xl font-bold mt-2">{value}</p>
    <p className="text-sm font-medium opacity-90 mb-2">{valueLabel}</p>
  </div>
);

export default AdminDashboard;
